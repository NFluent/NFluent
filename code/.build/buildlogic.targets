<?xml version="1.0" encoding="utf-8"?>

<Project ToolsVersion="15.0" DefaultTargets="" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--Configuration informations-->
  <PropertyGroup>
    <opencoverVersion Condition="'$(opencoverVersion)' == ''">4.7.1221</opencoverVersion>
    <reportGeneratorVersion Condition="'$(reportGeneratorVersion)' == ''">5.0.4</reportGeneratorVersion>
    <nunitConsoleVersion Condition="'$(nunitConsoleVersion)' == ''">3.15.0</nunitConsoleVersion>
    <xunitConsoleVersion Condition="'$(xunitConsoleVersion)' == ''">2.4.1</xunitConsoleVersion>

    <Configuration Condition="$(Configuration) == ''">Release</Configuration>
    <AssemblyFileNameRoot>$(SolutionRoot)\$(SolutionName)</AssemblyFileNameRoot>

    <OpenCoverFilter>+[*]* -[*.Tests*]* -[nunit*]* -[NUnit*]* -[xunit*]* -[Newtonsoft*]*</OpenCoverFilter>
    <CoverageDataFile>$(SolutionRoot)\$(SolutionName)-coverage.xml</CoverageDataFile>

    <PackageStream>alpha</PackageStream>
    <ArtifactsPath>$(SolutionRoot)\Artifacts</ArtifactsPath>
    <BinariesPath>$(ArtifactsPath)\Binaries</BinariesPath>
    <PackagesPath>$(ArtifactsPath)\Packages</PackagesPath>

    <NuGetToolsPath>$(SolutionRoot)\Packages</NuGetToolsPath>
    <MsTestRunner>vstest.console.exe</MsTestRunner>

    <NunitOptions>--result="$(SolutionRoot)\TestResult.xml"</NunitOptions>
    <DotNetTestOptions>--no-build</DotNetTestOptions>
    <nUnitTestRunnerPath>$(NuGetToolsPath)\NUnit.ConsoleRunner\$(nunitConsoleVersion)\tools\nunit3-console.exe</nUnitTestRunnerPath>
    <xunitOptions />
    <xUnitTestRunnerPath>$(NuGetToolsPath)\XUnit.runner.console\$(xunitConsoleVersion)\tools\net472\xunit.console.exe</xUnitTestRunnerPath>
    <CoverToolPath>$(NuGetToolsPath)\OpenCover\$(opencoverVersion)\tools</CoverToolPath>
    <CoverReportToolPath>$(NuGetToolsPath)\ReportGenerator\$(reportGeneratorVersion)\tools</CoverReportToolPath>

    <VsPath Condition="Exists('$(MSBuildProgramFiles32)\Microsoft Visual Studio\2019\Community\')">$(MSBuildProgramFiles32)\Microsoft Visual Studio\2019\Community\</VsPath>
    <VsPath Condition="Exists('$(MSBuildProgramFiles32)\Microsoft Visual Studio\2019\Professional\')">$(MSBuildProgramFiles32)\Microsoft Visual Studio\2019\Professional\</VsPath>
    <VsPath Condition="Exists('$(MSBuildProgramFiles32)\Microsoft Visual Studio\2019\Enterprise\')">$(MSBuildProgramFiles32)\Microsoft Visual Studio\2019\Enterprise\</VsPath>
    <VsPath Condition="Exists('$(MSBuildProgramFiles32)\Microsoft Visual Studio\2017\Community\')">$(MSBuildProgramFiles32)\Microsoft Visual Studio\2017\Community\</VsPath>
    <VsPath Condition="Exists('$(MSBuildProgramFiles32)\Microsoft Visual Studio\2017\Professional\')">$(MSBuildProgramFiles32)\Microsoft Visual Studio\2017\Professional\</VsPath>
    <VsPath Condition="Exists('$(MSBuildProgramFiles32)\Microsoft Visual Studio\2017\Enterprise\')">$(MSBuildProgramFiles32)\Microsoft Visual Studio\2017\Enterprise\</VsPath>
    <VsPath Condition="Exists('$(MSBuildProgramFiles32)\Microsoft Visual Studio\2019\Preview\')">$(MSBuildProgramFiles32)\Microsoft Visual Studio\2019\Preview\</VsPath>
    <VsPath Condition="Exists('$(ProgramFiles)\Microsoft Visual Studio\2022\Community\')">$(ProgramFiles)\Microsoft Visual Studio\2022\Community\</VsPath>

    <MsTestRunnerPath>$(VsPath)\Common7\IDE\CommonExtensions\Microsoft\TestWindow\</MsTestRunnerPath>
    <MsTestOptions />
  </PropertyGroup>

  <!-- Specifics for appveyor: use env provided nunit runner for result publication-->
  <Choose>
    <When Condition="'$(APPVEYOR)'=='True'">
      <PropertyGroup>
        <NunitOptions>--result="$(SolutionRoot)\TestResult.xml";format=AppVeyor</NunitOptions>
        <nUnitTestRunnerPath>nunit3-console.exe</nUnitTestRunnerPath>
        <xUnitTestRunnerPath>$(xunit20)\xunit.console.x86.exe</xUnitTestRunnerPath>
        <xunitOptions>-appveyor</xunitOptions>
        <MsTestRunnerPath></MsTestRunnerPath>
        <MsTestOptions>/logger:Appveyor</MsTestOptions>
        <DotNetTestOptions></DotNetTestOptions>
        <In>$(APPVEYOR_BUILD_VERSION)</In>
        <Pattern>(?&lt;Major&gt;\d+)\.(?&lt;Minor&gt;\d+)\.(?&lt;Patch&gt;[\d]+)\.(?&lt;PreReleaseInfo&gt;[\d]+)?</Pattern>
        <AssemblyVersionMajor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Major"].Value)</AssemblyVersionMajor>
        <AssemblyVersionMinor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Minor"].Value)</AssemblyVersionMinor>
        <AssemblyVersionPatch>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Patch"].Value)</AssemblyVersionPatch>
        <AssemblyVersionPreRelease>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["PreReleaseInfo"].Value)</AssemblyVersionPreRelease>
      </PropertyGroup>
    </When>
    <When Condition="'$(AppVeyorFile)'!=''">
      <PropertyGroup>
        <In>$([System.IO.File]::ReadAllText('$(AppVeyorFile)'))</In>
        <Pattern>version: *(?&lt;Major&gt;\d+)\.(?&lt;Minor&gt;\d+)\.(?&lt;Patch&gt;[\d]+)\.(?&lt;PreReleaseInfo&gt;[0-9A-Za-z-.]+)?</Pattern>
        <AssemblyVersionMajor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Major"].Value)</AssemblyVersionMajor>
        <AssemblyVersionMinor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Minor"].Value)</AssemblyVersionMinor>
        <AssemblyVersionPatch>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Patch"].Value)</AssemblyVersionPatch>
        <AssemblyVersionPreRelease>0</AssemblyVersionPreRelease>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <In>$([System.IO.File]::ReadAllText('$(AttributeVersionFile)'))</In>
        <Pattern>\[assembly: AssemblyFileVersion\("(?&lt;Major&gt;\d+)\.(?&lt;Minor&gt;\d+)\.(?&lt;Patch&gt;[\d]+)\.(?&lt;PreReleaseInfo&gt;[0-9A-Za-z-.]+)?</Pattern>
        <AssemblyVersionMajor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Major"].Value)</AssemblyVersionMajor>
        <AssemblyVersionMinor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Minor"].Value)</AssemblyVersionMinor>
        <AssemblyVersionPatch>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Patch"].Value)</AssemblyVersionPatch>
        <AssemblyVersionPreRelease>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["PreReleaseInfo"].Value)</AssemblyVersionPreRelease>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <Target Name="RunAll" DependsOnTargets="Build; RunTests; CoverageReport; PackageTarget" />
  <Target Name="CI" DependsOnTargets="Build; RunTests; CoverageReport; PackageTarget;" />
  <Target Name="Push" DependsOnTargets="RunAll; Publish" />
  <Target Name="Beta" DependsOnTargets="SetBeta; Push" />
  <Target Name="Nightly" DependsOnTargets="SetNightly; RunAll" />
  <Target Name="Alpha" DependsOnTargets="SetAlpha; Push" />
  <Target Name="RC" DependsOnTargets="SetRC; RunAll; Push" />
  <Target Name="Release" DependsOnTargets="SetRelease; Push" />
  <Target Name="DebugBuild" DependsOnTargets="PackageTarget" />

  <!--Targets-->
  <Target Name="Start">
    <Error Text="Can't find VisualStudio Tools" Condition="'$(VsPath)'==''" />
  </Target>

  <Target Name="SetNightly">
    <PropertyGroup>
      <PackageStream>nightly</PackageStream>
    </PropertyGroup>
    <Message Importance="high" Text="Starting nightly build"/>
  </Target>
  <Target Name="SetRC">
    <PropertyGroup>
      <PackageStream>RC</PackageStream>
    </PropertyGroup>
    <Message Importance="high" Text="Starting Release Candidate build"/>
  </Target>
  <Target Name="SetRelease">
    <PropertyGroup>
      <PackageStream></PackageStream>
    </PropertyGroup>
    <Message Importance="high" Text="Starting Release build"/>
  </Target>
  <Target Name="SetAlpha">
    <PropertyGroup>
      <PackageStream>alpha</PackageStream>
    </PropertyGroup>
    <Message Importance="high" Text="Starting Alpha build"/>
  </Target>
  <Target Name="SetBeta">
    <PropertyGroup>
      <PackageStream>beta</PackageStream>
    </PropertyGroup>
    <Message Importance="high" Text="Starting Beta build"/>
  </Target>

  <!--Scan framework in csproj files-->
  <!--This is an experimentation in progress that aims at capturing info from csproj files. Not used in active script-->
  <Target Name="Scan">
    <ItemGroup>
      <FullProjectDescription Include="@(ProjectFolder)" Condition="'%(ProjectFolder.CSproj)'!=''">
        <CSProjFullName>%(ProjectFolder.FullPath)\%(ProjectFolder.CsProj)</CSProjFullName>
        <Framework />
      </FullProjectDescription>
    </ItemGroup>
    <XmlPeek Query="//TargetFramework" XmlInputPath="%(FullProjectDescription.CSProjFullName)" Result="%(Framework)">
    </XmlPeek>
    <Message Importance="high" Text="detected: %(Framework) in %(FullProjectDescription.CSProjFullName)" />
  </Target>

  <!-- 0- Align version numners -->
  <Target Name="SynchroVersion" DependsOnTargets="Start">
    <!-- Ensure version number is propagated in new CsProj format file-->
    <!-- Capture version number -->
    <PropertyGroup>
      <NumericalVersion>$(AssemblyVersionMajor).$(AssemblyVersionMinor).$(AssemblyVersionPatch).$(AssemblyVersionPreRelease)</NumericalVersion>
      <APIVersion Condition="$(APIVersion)==''">$(AssemblyVersionMajor).$(AssemblyVersionMinor).0.0</APIVersion>
    </PropertyGroup>
    <VersionBuilding version="$(NumericalVersion)" stream="$(PackageStream)">
      <Output PropertyName="PrettyVersion" TaskParameter="fullVersion" />
    </VersionBuilding>

    <Message Importance="high" Text="--------- VERSION NUMBER SYNCHRO  -------------------------------------" />
    <Message Importance="high" Text="APIVersion       : $(APIVersion)" />
    <Message Importance="high" Text="Version          : $(NumericalVersion)" />
    <Message Importance="high" Text="Informal Version : $(PrettyVersion)" />
    <ItemGroup>
      <RegexTransform Include="$(AttributeVersionFile)">
        <Find>AssemblyFileVersion\("(?&lt;major&gt;\d+)\.(?&lt;minor&gt;\d+)\.\d+\.(?&lt;revision&gt;\d+)</Find>
        <ReplaceWith>AssemblyFileVersion("$(NumericalVersion)</ReplaceWith>
      </RegexTransform>
      <RegexTransform Include="$(AttributeVersionFile)">
        <Find>InformationalVersion\("(?&lt;major&gt;\d+)\.(?&lt;minor&gt;\d+)\.\d+[\.-](?&lt;revision&gt;[^)"]*)</Find>
        <ReplaceWith>InformationalVersion("$(PrettyVersion)</ReplaceWith>
      </RegexTransform>
      <RegexTransform Include="$(AttributeVersionFile)">
        <Find>AssemblyVersion\("(?&lt;major&gt;\d+)\.(?&lt;minor&gt;\d+)\.\d+[\.-](?&lt;revision&gt;[^)"]*)</Find>
        <ReplaceWith>AssemblyVersion("$(APIVersion)</ReplaceWith>
      </RegexTransform>
    </ItemGroup>
    <RegexTransform Items="@(RegexTransform)" />

    <ItemGroup>
      <CSProjToPatch Include="@(ProjectFolder)" Condition="'%(ProjectFolder.Fwk)'=='core'">
        <FullName>%(ProjectFolder.FullPath)\%(ProjectFolder.CsProj)</FullName>
      </CSProjToPatch>
    </ItemGroup>
    <Message Importance="high" Text="Patching versions in %(CSProjToPatch.FullName) to $(PrettyVersion)" />
    <XmlPoke
      XmlInputPath="%(CSProjToPatch.FullName)"
      Query="//AssemblyVersion"
      Value="$(APIVersion)" />
    <XmlPoke
      XmlInputPath="%(CSProjToPatch.FullName)"
      Query="//FileVersion"
      Value="$(NumericalVersion)" />
    <XmlPoke
      XmlInputPath="%(CSProjToPatch.FullName)"
      Query="//Version"
      Value="$(PrettyVersion)" />
    <XmlPoke
      XmlInputPath="%(CSProjToPatch.FullName)"
      Query="//InformationalVersion"
      Value="$(PrettyVersion)" />
    <Message Importance="high" Text="--------- end of VERSION NUMBER SYNCHRO  ------------------------------" />
  </Target>

  <!-- 1- Restore dependencies -->
  <Target Name="NugetRestore" DependsOnTargets="SynchroVersion">

    <Message Importance="high" Text="--------- NUGET RESTORE  -------------------------------------------" />
    <Exec Command='dotnet nuget remove source extraSource' Condition="'$(NugetSource)'!=''"
          IgnoreExitCode="true" />
    <Exec Command='dotnet nuget add source -n extraSource $(NugetSource)'
          Condition="'$(NugetSource)'!=''" IgnoreExitCode="true" />
    <Message Importance="high" Text="Restoring projects" />
    <Exec
      Command='dotnet restore $(SolutionRoot)\$(SolutionName).sln --packages "$(SolutionRoot)\packages"' />
    <Message Importance="high" Text="--------- end of NUGET RESTORE  -------------------------------------" />
  </Target>

  <!-- 2- Do the BUILD -->
  <Target Name="Build" DependsOnTargets="NugetRestore">
    <Message Importance="high" Text="--------- BUILD  -------------------------------------------" />
    <Message Importance="high"
             Text="
---------------------------------------------------------------
BUILD PROJECT with MSBuildToolsVersion: '$(MSBuildToolsVersion)'
---------------------------------------------------------------
      " />

    <Message Importance="normal" Text="--------- will run: $(SolutionRoot)\$(SolutionName).sln" />
    <MSBuild Projects="$(SolutionRoot)\$(SolutionName).sln"
             Targets="Build"
             BuildInParallel="true"
             Properties="Configuration=$(Configuration)" />

    <Message Importance="high" Text="--------- end of BUILD  -------------------------------------" />
  </Target>

  <!-- 3- Run the TESTS -->
  <Target Name="ListTestProjects">
    <ItemGroup>
      <TestRun Include="@(TestProjects)"
               Condition="$([System.String]::Copy('%(TestProjects.Framework)').StartsWith('net-')) AND '%(TestProjects.Runner)'==''">
        <Runner>$(nUnitTestRunnerPath)</Runner>
        <Args Condition="'%(TestProjects.DontReport)'!='true'">%(TestProjects.FullPath) $(NunitOptions) /framework:%(TestProjects.Framework)</Args>
        <Args Condition="'%(TestProjects.DontReport)'=='true'">%(TestProjects.FullPath) /framework:%(TestProjects.Framework)</Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>
      <TestRun Include="@(TestProjects)"
               Condition="!$([System.String]::Copy('%(TestProjects.Framework)').StartsWith('net-')) AND '%(TestProjects.Runner)'!='Self'">
        <Runner>dotnet.exe</Runner>
        <Args>test %(TestProjects.FullPath) -c $(Configuration) $(DotNetTestOptions)</Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>
      <TestRun Include="@(TestProjects)"
               Condition="$([System.String]::Copy('%(TestProjects.Framework)').StartsWith('net-')) AND '%(TestProjects.Runner)'=='xUnit'">
        <Runner>"$(xUnitTestRunnerPath)"</Runner>
        <Args Condition="'%(TestProjects.DontReport)'!='true'">"%(TestProjects.FullPath)" $(xunitOptions)</Args>
        <Args Condition="'%(TestProjects.DontReport)'=='true'">"%(TestProjects.FullPath)"</Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>
      <TestRun Include="@(TestProjects)"
               Condition="$([System.String]::Copy('%(TestProjects.Framework)').StartsWith('net-')) AND '%(TestProjects.Runner)'=='MsTest'">
        <Runner>"$(MsTestRunnerPath)$(MsTestRunner)"</Runner>
        <Args>$(MsTestOptions) %(TestProjects.Identity)</Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>
      <TestRun Include="@(TestProjects)"
               Condition="$([System.String]::Copy('%(TestProjects.Framework)').StartsWith('net-')) AND '%(TestProjects.Runner)'=='Self'">
        <Runner>"%(TestProjects.Identity)"</Runner>
        <Args></Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>
      <TestRun Include="@(TestProjects)"
               Condition="!$([System.String]::Copy('%(TestProjects.Framework)').StartsWith('net-')) AND '%(TestProjects.Runner)'=='Self'">
        <Runner>dotnet.exe</Runner>
        <Args>"%(TestProjects.Identity)"</Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>
    </ItemGroup>
  </Target>

  <Target Name="RunTests" DependsOnTargets="Build; ListTestProjects">

    <Message Importance="high" Text="
---------------------------------------------------------------
RUN ALL UNIT TESTS
---------------------------------------------------------------
          " />
    <!--Ensure runners are deployed-->
    <Exec Command='dotnet add package nunit.console --package-directory "$(NuGetToolsPath)" --version $(nunitConsoleVersion)'
          Condition='!Exists($(nUnitTestRunnerPath))' />

    <Exec Command='dotnet add package XUnit.runner.console --package-directory "$(NuGetToolsPath)" --version $(xunitConsoleVersion)'
      Condition='!Exists($(xUnitTestRunnerPath))' />

    <Message Importance="high" Text="--------- RUN TESTS ---------" />
    <Exec Command='%(TestRun.Runner) %(TestRun.Args)' LogStandardErrorAsError="true" WorkingDirectory="$(SolutionRoot)" />
    <Message Importance="high" Text="--------- end of RUN TESTS ---------" />
  </Target>

  <!-- 4- Tests coverage -->
  <Target Name="Coverage" DependsOnTargets="ListTestProjects">
    <Message Importance="high" Text="--------- Coverage ---------" />
    <Delete Files="$(CoverageDataFile)" />
    <!-- OpenCover must be added as an explicit dependency for one project as I do not know how to install a package outside a project 
     with dotnet nuget
    <Exec Command='dotnet add package opencover -package-directory "$(NuGetToolsPath)" -v $(opencoverVersion)' />
    -->
    <Message Importance="normal" Text="Cover for %(TestRun.Identity) : $(CoverageDataFile) -mergeoutput "
             Condition="'%(TestRun.Coverage)'=='true'" />
    <Exec
      Command='"$(CoverToolPath)\OpenCover.Console" -oldstyle -target:%(TestRun.Runner) -searchdirs:%(TestRun.RelativeDir) -register:user -filter:"$(OpenCoverFilter)" -excludebyattribute:*.ExcludeFromCodeCoverage*  -output:"$(CoverageDataFile)" -mergeoutput -mergebyhash -"targetargs:%(TestRun.Args)"'
      Condition="'%(TestRun.Coverage)'=='true'" />
    <Message Importance="high" Text="--------- end of Coverage ---------" />
  </Target>

  <!-- 5- Tests coverage report-->
  <Target Name="CheckCoverage" DependsOnTargets="Coverage">
    <!--Scan result for partial coverage-->
    <XmlPeek XmlInputPath='$(CoverageDataFile)'
             Query="//Class[Summary/@sequenceCoverage&lt;100 and Summary/@numSequencePoints>0]/FullName/text()"
             Condition="Exists($(CoverageDataFile))">
      <Output TaskParameter="Result" ItemName="Peeked" />
    </XmlPeek>
    <XmlPeek XmlInputPath='$(CoverageDataFile)'
             Query="//Class[Summary/@branchCoverage&lt;100 and Summary/@numBranchPoints>0]/FullName/text()"
             Condition="Exists($(CoverageDataFile))">
      <Output TaskParameter="Result" ItemName="BranchPeeked" />
    </XmlPeek>
    <Warning Text="Insufficient line coverage on @(Peeked)" Condition="'@(Peeked)'!=''" />
    <Warning Text="Insufficient branch coverage on @(BranchPeeked)" Condition="'@(BranchPeeked)'!=''" />
    <Warning Text="No coverage data generated" Condition="!Exists($(CoverageDataFile))" />
  </Target>

  <Target Name="CoverageReport" DependsOnTargets="Coverage;CheckCoverage">
    
    <Exec Command='dotnet tool update dotnet-reportgenerator-globaltool --version $(reportGeneratorVersion)' />
    
    <Message Importance="high" Text="--------- Publish Coverage ---------" />
    <Message Importance="high" Text="Get Tools" />

    <Exec
      Command='dotnet reportgenerator -reports:$(CoverageDataFile) -targetdir:"$(SolutionRoot)\CoverageReport"'
      Condition="('$(APPVEYOR)'!='True') and (Exists($(CoverageDataFile)))" />

    <Exec Command="python -m pip install codecov --user" />
    <Exec WorkingDirectory="$(SolutionRoot)"
          Command='python -m codecov -f "$(CoverageDataFile)" -t $(CodeCovKey) -X gcov -n $(SolutionName)'
          Condition="('$(CodeCovKey)'!='') AND ('$(APPVEYOR)'=='True')" />
    <Message Importance="high" Text="--------- end of Publish Coverage ---------" />
  </Target>

  <!-- 5- Then PACKAGE -->
  <Target Name="PackageTarget" DependsOnTargets="SynchroVersion">
    <Message Importance="high" Text="---------- PACKAGE ---------" />
    <ItemGroup>
      <FilesForNuget Include="@(ProjectFolder)"
                     Condition="'%(ProjectFolder.PackageTarget)'!='' AND '%(ProjectFolder.Fwk)'!='core'">
        <TargetFwk>%(ProjectFolder.PackageTarget)</TargetFwk>
        <SourceDir>%(ProjectFolder.FullPath)\bin\$(Configuration)\*.*</SourceDir>
      </FilesForNuget>
      <FilesForNuget Include="@(ProjectFolder)"
                     Condition="'%(ProjectFolder.PackageTarget)'!='' AND '%(ProjectFolder.Fwk)'=='core'">
        <TargetFwk>%(ProjectFolder.PackageTarget)</TargetFwk>
        <SourceDir>%(ProjectFolder.FullPath)\bin\$(Configuration)\%(ProjectFolder.PackageTarget)\*.*</SourceDir>
      </FilesForNuget>
    </ItemGroup>
    <!-- Copies the dll into an easy path targeted by the .nuspec file. -->
    <Message Text="xcopy %(FilesForNuget.SourceDir) $(BinariesPath)\%(FilesForNuget.TargetFwk)\ /E /Y" />
    <Exec Command='xcopy "%(FilesForNuget.SourceDir)" "$(BinariesPath)\%(FilesForNuget.TargetFwk)\" /E /Y /Q' />

    <!-- Get the version number of the main FV assembly to insert into the nuspec files -->
    <Message Importance="high" Text="[Print] PackageVersion: '$(NumericalVersion)'" />
    <Message Importance="high" Text="[Print] NuspecFilePath: '$(NuspecFilePath)'" />

    <!-- insert the version number into the nuspec file -->
    <XmlPoke
      XmlInputPath="$(NuspecFilePath)"
      Namespaces="&lt;Namespace Prefix='x' Uri='http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd' /&gt;"
      Query="x:package/x:metadata/x:version"
      Value="$(PrettyVersion)" />

    <!-- Gets the release note content from the proper file -->
    <ReadLinesFromFile File="$(ReleaseNoteFile)">
      <Output TaskParameter="Lines" ItemName="FileContents" />
    </ReadLinesFromFile>

    <!-- Sets its content into a variable with n/a as the default value -->
    <PropertyGroup>
      <ReleaseNoteContent>n/a</ReleaseNoteContent>
    </PropertyGroup>

    <PropertyGroup Condition=" '@(FileContents,'%0a%0d')' != '' ">
      <ReleaseNoteContent>@(FileContents,'%0a%0d')</ReleaseNoteContent>
    </PropertyGroup>

    <!-- Updates the nuspec file with this variable content -->
    <XmlPoke
      XmlInputPath="$(NuspecFilePath)"
      Namespaces="&lt;Namespace Prefix='x' Uri='http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd' /&gt;"
      Query="x:package/x:metadata/x:releaseNotes"
      Value="$(ReleaseNoteContent.Replace('&amp;', '&amp;&amp;').Replace('&lt;', '&amp;lt;').Replace('&gt;', '&amp;gt;'))" />

    <Message Importance="high"
             Text="
---------------------------------------------------------------
CREATING NUGET PACKAGE IN:
    - $(PackagesPath)
---------------------------------------------------------------
            " />
    <MakeDir Directories="$(PackagesPath)" Condition="!Exists('$(PackagesPath)')" />
    <Delete Files="$(PackagesPath)\*.*" />
    <Exec Command='dotnet pack -p:NuspecFile="$(NuspecFilePath)" --no-build -o "$(PackagesPath)"'
          LogStandardErrorAsError="true" />

    <Message Importance="high" Text="--------- End of PACKAGE ---------" />
  </Target>

  <!-- 6- Then Publish (but not for PR)-->
  <Target Name="Publish" DependsOnTargets="PackageTarget">
    <PropertyGroup>
      <PackageFileName>$(PackagesPath)\$(SolutionName).$(PrettyVersion).nupkg</PackageFileName>
    </PropertyGroup>
    <!--= Publish the package on Nuget-->
    <Message Importance="high" Text="--------- NUGET PUBLISH  -------------------------------------------" />

    <Exec Command='dotnet nuget push "$(PackageFileName)" -k $(NugetKey) -s $(NugetFeed)'
          Condition="'$(NugetKey)'!='' AND '$(APPVEYOR_PULL_REQUEST_NUMBER)'==''" />

    <Message Importance="high" Text="--------- end of NUGET PUBLISH  -------------------------------------" />
  </Target>

  <UsingTask TaskName="VersionBuilding" TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <version ParameterType="System.String" Required="true" />
      <stream ParameterType="System.String" Required="false" />
      <fullVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[ 
            var builder = new StringBuilder(version.Length);
            var parts = (version+".0.0").Split('.');
            if (string.IsNullOrEmpty(stream))
            {
              builder.AppendFormat("{0}.{1}.{2}", parts[0], parts[1], parts[2]);
            }
            else
            {
              builder.AppendFormat("{0}.{1}.{2}.{3}-{4}", parts[0], parts[1], parts[2], parts[3], stream);
            }
            fullVersion=builder.ToString();
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="RegexTransform" TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            foreach(ITaskItem item in Items) {
              string fileName = item.GetMetadata("FullPath");
              string find = item.GetMetadata("Find");
              string replaceWith = item.GetMetadata("ReplaceWith");
              
              if(!File.Exists(fileName)) {
                Log.LogError(null, null, null, null, 0, 0, 0, 0, String.Format("Could not find version file: {0}", fileName), new object[0]);
              }
              string content = File.ReadAllText(fileName);
              File.WriteAllText(
                fileName,
                Regex.Replace(
                  content,
                  find,
                  replaceWith
                )
              );
            }
          ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>